<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Bhumit's blog]]></title><description><![CDATA[Personal blog of Bhumit Attarde]]></description><link>https://blog.bhumit.net</link><generator>GatsbyJS</generator><lastBuildDate>Sat, 11 Sep 2021 19:35:13 GMT</lastBuildDate><item><title><![CDATA[Software Engineering lessons learned at smallcase]]></title><description><![CDATA[(This blog was originally published on smalltalk.) I’m a junior year engineering student and I’ve been working as a Backend Software…]]></description><link>https://blog.bhumit.net/swe-lessons-learned-at-smallcase/</link><guid isPermaLink="false">https://blog.bhumit.net/swe-lessons-learned-at-smallcase/</guid><pubDate>Thu, 26 Aug 2021 20:00:00 GMT</pubDate><content:encoded>&lt;!-- # Software Engineering lessons learned at smallcase --&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;(This blog was originally published on &lt;a href=&quot;https://www.smallcase.com/blog/software-engineering-lessons-learned-at-smallcase/&quot;&gt;smalltalk&lt;/a&gt;.)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I’m a junior year engineering student and I’ve been working as a Backend Software Engineer Intern at &lt;a href=&quot;https://www.smallcase.com&quot;&gt;smallcase&lt;/a&gt; for the past couple months. This blog is supposed to congregate, go over some of the Software Engineering, optimization, JavaScript and Mongoose related lessons I learned during my internship.&lt;/p&gt;
&lt;h2&gt;General&lt;/h2&gt;
&lt;h3&gt;Decide a formatting style at the beginning of every project and stick to it.&lt;/h3&gt;
&lt;p&gt;No matter how small you think a project is going to turn out, decide formatting rules and format code from the start. Even the smallest projects can grow a lot and formatting them later can be a struggle. Pull/Merge requests to an unformatted project are an absolute pain for the reviewer if submission has a formatting commit. Forget about git blame too — it will be rendered useless.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;: Use &lt;a href=&quot;https://git-scm.com/docs/git-blame#Documentation/git-blame.txt---ignore-revs-fileltfilegt&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;.git-blame-ignore-revs&lt;/code&gt;&lt;/a&gt; to save git blame from being trashed because of mass-formatting commits.&lt;/p&gt;
&lt;h2&gt;Optimization&lt;/h2&gt;
&lt;h3&gt;“Premature optimization is the root of all evil”&lt;/h3&gt;
&lt;p&gt;Okay, maybe not &lt;em&gt;all&lt;/em&gt;, but &lt;em&gt;most&lt;/em&gt; for sure. &lt;a href=&quot;https://en.wikipedia.org/wiki/Donald_Knuth&quot;&gt;Donald Knuth&lt;/a&gt; said it in the 60s and it still holds true. Here is the full quote:&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil. Yet we should not pass up our opportunities in that critical 3%.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Premature optimization often leads to stealthy bugs and subpar code. Optimization should come later in the development cycle. Focus should &lt;strong&gt;always&lt;/strong&gt; be on writing readable and maintainable code that your co-workers can comprehend. If you’re going to (unnecessarily) sprinkle your code with voodoo magic, do the bare minimum of commenting the explanation or providing a helpful link.&lt;/p&gt;
&lt;h4&gt;How to know if you’re optimizing prematurely?&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://www.explainxkcd.com/wiki/index.php/1691:_Optimization&quot;&gt;XKCD&lt;/a&gt; to the rescue! Be sure to go through the explanation.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://imgs.xkcd.com/comics/optimization_2x.png&quot; alt=&quot;XKCD: Optimization&quot;&gt;&lt;/p&gt;
&lt;p&gt;Here’s a bonus XKCD:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://imgs.xkcd.com/comics/efficiency_2x.png&quot; alt=&quot;XKCD: Efficiency&quot;&gt;&lt;/p&gt;
&lt;h3&gt;Optimization comes at a cost.&lt;/h3&gt;
&lt;p&gt;Three optimization costs that stick out like a sore thumb are reduction in readability, maintainability of the code and additional bandwidth that needs to be dedicated for the job. The last one is particularly frustrating because even if you do dedicate bandwidth for optimizing a block of code, you’re not guaranteed to get the results. And if you do get the results, they &lt;em&gt;might&lt;/em&gt; not be satisfactory if you contrast them with the amount of effort put in. Highly optimized code blocks also tend to be very specialized, harming modularity and reducing reusability.&lt;/p&gt;
&lt;p&gt;Keep in mind that optimization is never free. Optimize only if necessary. Give priority to critical sections of the program/system. There’s not much to be gained by optimizing a little job that runs every two hours and processes some simple data. But, a tight loop that gets called after every API call is a great candidate for optimization. Remember — first step of optimization is not &lt;strong&gt;&lt;em&gt;how&lt;/em&gt;&lt;/strong&gt;, but &lt;strong&gt;&lt;em&gt;if&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Benchmark. Benchmark. Benchmark.&lt;/h3&gt;
&lt;p&gt;Measure. Don’t assume or guess. Never make &lt;strong&gt;non-trivial&lt;/strong&gt; changes because you &lt;em&gt;think&lt;/em&gt; they’ll make the program perform better. Once you are positive that you &lt;em&gt;need&lt;/em&gt; to optimize, profiling should be the next step. To optimize, you need to identify the bottlenecks first. To identify the bottlenecks, you need to profile and benchmark first.&lt;/p&gt;
&lt;p&gt;Optimizing without benchmarking is blind optimization and should be avoided like the plague. Trying to optimize without profiling will almost always lead to bad optimizations, optimizations which weren’t worth sacrificing the code readability and/or maintainability for, and may sometimes even make the program perform worse. Now you have worse quality code which also runs slower!&lt;/p&gt;
&lt;h3&gt;Databases are almost always the bottleneck, minimize hitting them.&lt;/h3&gt;
&lt;p&gt;Any database, in the end, is I/O, and anyone who has dealt with I/O will tell you that I/O is almost always the bottleneck. Try to minimize querying databases as much as you can. If the data you’re querying doesn’t change often, cache it. See if you can get the required result by fetching relevant data and grouping it on your end instead of querying multiple times. But, as always, profile before and after so you can determine whether or not you should let go of the convenience of getting grouped data with a simple query.&lt;/p&gt;
&lt;h2&gt;JavaScript&lt;/h2&gt;
&lt;h3&gt;Prefer Promises.&lt;/h3&gt;
&lt;h4&gt;What are promises?&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Promises&lt;/code&gt;&lt;/a&gt; are objects that represent the result of an asynchronous operation. Promises were introduced in ECMAScript 2015. As of 2021, all major browsers support Promises and every major library has a Promise API available.&lt;/p&gt;
&lt;h4&gt;Why Promises?&lt;/h4&gt;
&lt;p&gt;Async JavaScript or async code, in general, written with callbacks is hard to read. Promise flow, on the other hand, thanks to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;.then()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises#chaining&quot;&gt;chaining&lt;/a&gt;, is very easy and intuitive to read. Compare the following code blocks:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;groupData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;queryResult&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;groupMore&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;groupedData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;
            &lt;span class=&quot;token function&quot;&gt;processData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;moreGroupedData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;
            &lt;span class=&quot;token function&quot;&gt;cleanData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;processedData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;
                &lt;span class=&quot;token function&quot;&gt;sendData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;cleanedData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;queryResult&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;groupedData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;moreGroupedData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;processedData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;cleanedData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Promises provide better error handling as well:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;queryResult&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;groupedData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;moreGroupedData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;processedData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;cleanedData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// Free exception handling without try catch blocks!&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What if you wanted to execute a block of code irrespective of whether there was an error?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;queryResult&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;groupedData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;moreGroupedData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;processedData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;cleanedData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// Handle errors till this point&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// Do something&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Promises have lots of neat little tricks and features that give them edge over callbacks but listing them is out of the scope of this blog. Refer to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises&quot;&gt;MDN — Using Promises&lt;/a&gt; for &lt;em&gt;some&lt;/em&gt; of them.&lt;/p&gt;
&lt;h4&gt;Make Promises the first choice when writing async code.&lt;/h4&gt;
&lt;p&gt;While converting a callback API to a Promise based API is definitely worth the effort, it’s still a fair amount of work. That manpower can be used somewhere else. Most programmers write callback APIs out of old habits and simply because that’s what they’ve been using for a long time. This needs to change. There are very few reasons to use callbacks over Promises, especially in 2021. Promises should be the first choice and not the other way around.&lt;/p&gt;
&lt;h2&gt;Mongoose&lt;/h2&gt;
&lt;h3&gt;Analyze queries using &lt;code class=&quot;language-text&quot;&gt;.explain()&lt;/code&gt;.&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://mongoosejs.com/docs/api/query.html#query_Query-explain&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;.explain()&lt;/code&gt;&lt;/a&gt; is a great way to get some solid query execution stats. It dumps a lot of information that you can use to optimize your queries. Try different querying methods, understand querying patterns, see how each of them stack up against each other and make an informed decision. If you’re feeling overwhelmed by the output, try shrinking it by reducing &lt;code class=&quot;language-text&quot;&gt;verbosity&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Utilize &lt;code class=&quot;language-text&quot;&gt;.lean()&lt;/code&gt; whenever you can.&lt;/h3&gt;
&lt;p&gt;From &lt;a href=&quot;https://mongoosejs.com/docs/tutorials/lean.html&quot;&gt;Mongoose documentation&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;The lean option tells Mongoose to skip hydrating the result documents. This makes queries faster and less memory intensive, but the result documents are plain old JavaScript objects (POJOs), not Mongoose documents.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Use the &lt;a href=&quot;https://mongoosejs.com/docs/tutorials/lean.html#using-lean&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;.lean()&lt;/code&gt;&lt;/a&gt; option if you’re querying some data that doesn’t get modified in the process, it can improve querying performance A LOT. A good candidate is a function that only returns a user’s information:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;userName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;
    Users&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findOne&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; userName &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;lean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// return/send the result&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Fetch only required data using projections.&lt;/h3&gt;
&lt;p&gt;Use &lt;a href=&quot;https://mongoosejs.com/docs/api/query.html#query_Query-projection&quot;&gt;projections&lt;/a&gt; if you’re dealing with only a subset of fields. Projections always offer much better performance compared to their alternatives. For example — consider that a collection has &lt;code class=&quot;language-text&quot;&gt;name&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;address&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;phone&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;age&lt;/code&gt; fields, but you’re dealing with only &lt;code class=&quot;language-text&quot;&gt;name&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;address&lt;/code&gt; fields. Use&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    collection&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;query&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; address&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;instead of&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    collection&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;query&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;name address&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Google Summer of Code 2021 final report]]></title><description><![CDATA[Project summary Integrating XFSTESTS with KDE KIO-FUSE While current testing suite of KIO-FUSE tests individual operations pretty aptly, it…]]></description><link>https://blog.bhumit.net/gsoc-2021-work-product/</link><guid isPermaLink="false">https://blog.bhumit.net/gsoc-2021-work-product/</guid><pubDate>Thu, 19 Aug 2021 14:00:00 GMT</pubDate><content:encoded>&lt;!-- Google Summer of Code 2021 final report --&gt;
&lt;h2&gt;Project summary&lt;/h2&gt;
&lt;h3&gt;&lt;a href=&quot;https://summerofcode.withgoogle.com/projects/#6429306361741312&quot;&gt;Integrating XFSTESTS with KDE KIO-FUSE&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While current testing suite of KIO-FUSE tests individual operations pretty aptly, it lacks the support to put KIO-FUSE through regression tests. KIO-FUSE has not been through regression tests and chances are, doing so would uncover bugs that previously went undetected. KIO-FUSE is updated fairly frequently and new features are still being added, making regression testing a necessity to prevent new bugs from creeping in.&lt;/p&gt;
&lt;p&gt;The lack of regression tests in KIO-FUSE’s current testing suite can be fixed by integrating XFSTESTS with it. XFSTESTS is considered as the quintessential file system regression testing suite and KIO-FUSE would benefit greatly from it. A more rigorous testing regime would translate to an even more robust and reliable filesystem. Testing KIO-FUSE would mean we’re testing KIO slaves as well. As of now, XFSTESTS doesn’t support FUSE, and that’ll have to be added as a part of this project. FUSE support for XFSTESTS would be a major plus since it’d allow hundreds of file systems written using FUSE to be tested.&lt;/p&gt;
&lt;p&gt;The project not only benefits KIO, KIO-FUSE and KDE, but the FOSS community as a whole.&lt;/p&gt;
&lt;h2&gt;Final Deliverables&lt;/h2&gt;
&lt;h3&gt;FUSE support for XFSTESTS&lt;/h3&gt;
&lt;p&gt;Patched XFSTESTS file system regression testing suite for FUSE support. Go through &lt;a href=&quot;https://blog.bhumit.net/patching-xfstest-for-fuse-support/&quot;&gt;this blog I wrote&lt;/a&gt; to know more. The patch can be found at &lt;a href=&quot;https://github.com/bhumitattarde/XFSTESTS-FUSE-patch&quot;&gt;github.com/bhumitattarde/XFSTESTS-FUSE-patch&lt;/a&gt; and is &lt;a href=&quot;https://patchwork.kernel.org/project/fstests/patch/20210812045950.3190-1-bhumit.attarde01@gmail.com/&quot;&gt;under review&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;XFSTESTS support for KIO-FUSE&lt;/h3&gt;
&lt;p&gt;Patched KDE KIO-FUSE for XFSTESTS file system regression testing suite support. Merge request can be found at &lt;a href=&quot;https://invent.kde.org/system/kio-fuse/-/merge_requests/58&quot;&gt;invent.kde.org/system/kio-fuse/-/merge_requests/58&lt;/a&gt;. Core code is approved but unit tests and documentation are under review as of now.&lt;/p&gt;
&lt;h3&gt;KIO-FUSE XFSTESTS test results&lt;/h3&gt;
&lt;p&gt;Ran all tests and sorted the results in tabular, color-coded fashion. The spreadsheet can be found at &lt;a href=&quot;https://docs.google.com/spreadsheets/d/1LkeBuplbXXJxoXBS-ApsfA1trRLy1CB6PA5a8E1LyyY/edit?usp=sharing&quot;&gt;docs.google.com/spreadsheets/d/1LkeBuplbXXJxoXBS-ApsfA1trRLy1CB6PA5a8E1LyyY/edit?usp=sharing&lt;/a&gt;. Switch to the &lt;code class=&quot;language-text&quot;&gt;Raw&lt;/code&gt; sheet for raw test results.&lt;/p&gt;
&lt;h2&gt;Acknowledgements&lt;/h2&gt;
&lt;h3&gt;KDE&lt;/h3&gt;
&lt;p&gt;Thank you KDE for selecting me as a Google Summer of Code mentee. The community couldn’t have been more welcoming. I still remember the first mail I sent to the KDE mailing list asking for suggestions to get started (without a subject line as well, sorry folks :P) and the help that poured in.&lt;/p&gt;
&lt;h3&gt;Mentors&lt;/h3&gt;
&lt;p&gt;I cannot be more thankful to my mentors — feverfew (Alexander Saoutkin) and Fabian Vogt. We are from very different timezones but they still communicated with me almost daily. They were patient with me throughout the development period and even before GSoC started when I was just starting to understand what FUSE, KIO-FUSE are. They were amazing guides and helped me promptly whenever I was stuck.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Patching XFSTESTS file system regression testing suite for FUSE support]]></title><description><![CDATA[Introduction Hello everyone! I’ve been working as a student software developer for Google Summer of Code at KDE (KIO-FUSE) since past couple…]]></description><link>https://blog.bhumit.net/patching-xfstest-for-fuse-support/</link><guid isPermaLink="false">https://blog.bhumit.net/patching-xfstest-for-fuse-support/</guid><pubDate>Mon, 12 Jul 2021 12:00:00 GMT</pubDate><content:encoded>&lt;!-- # Patching XFSTESTS file system regression testing suite for FUSE support --&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Hello everyone! I’ve been working as a student software developer for &lt;a href=&quot;https://summerofcode.withgoogle.com/&quot;&gt;Google Summer of Code&lt;/a&gt; at &lt;a href=&quot;https://kde.org/&quot;&gt;KDE&lt;/a&gt; (&lt;a href=&quot;https://invent.kde.org/system/kio-fuse&quot;&gt;KIO-FUSE&lt;/a&gt;) since past couple months and thought it’d be nice to share the progress made. This particular blog is supposed to give readers a rough overview of what &lt;a href=&quot;https://github.com/libfuse/libfuse&quot;&gt;FUSE&lt;/a&gt;, &lt;a href=&quot;https://invent.kde.org/system/kio-fuse&quot;&gt;KIO-FUSE&lt;/a&gt;, &lt;a href=&quot;https://git.kernel.org/pub/scm/fs/xfs/xfstests-dev.git/&quot;&gt;XFSTESTS&lt;/a&gt; are, why we’re trying to integrate them, how far we’ve managed to come, and more important, to announce that it is finally possible to test FUSE file systems using XFSTESTS without ugly hacks!&lt;/p&gt;
&lt;h2&gt;Need for file system testing&lt;/h2&gt;
&lt;p&gt;File systems are one of the most critical parts of an operating system and the role played by them to ensure bug free experience as well as high reliability, and consistency is pretty important. Compared to other areas of an operating system, filesystems particularly need to be as bug free as possible to avoid disastrous events like corruption of a critical file. To make matters worse, the corruption may be replicated in the backups, effectively rendering the damaged data irreparable.&lt;/p&gt;
&lt;p&gt;File systems evolve constantly to complement the ever-changing technological landscape. They add new features, modify existing ones, try to introduce unique concepts making the codebase increasingly complex and sometimes unstable. Which, in turn, leads to a plethora of bugs — like most software. What makes this problem particularly exasperating when dealing with file systems is the fact that finding and fixing bugs in file systems is very hard, evident from the fact that 50% of the file system bugs take more than a year to be fixed.&lt;sup&gt;&lt;a href=&quot;https://dl.acm.org/doi/10.1145/2619090&quot;&gt;ref&lt;/a&gt;&lt;/sup&gt; This makes thoroughly testing file systems and associated programs a high priority affair. Unfortunately and to no one’s surprise, testing file systems is very hard as well. &lt;a href=&quot;https://www.jstage.jst.go.jp/article/transinf/E102.D/2/E102.D_2018EDP7006/_article/-char/en&quot;&gt;Learning from XFSTESTS (N Aota, K Kono)&lt;/a&gt; does a very good job of explaining the reasons behind it.&lt;/p&gt;
&lt;h2&gt;What are FUSE, KIO-FUSE and XFSTESTS?&lt;/h2&gt;
&lt;h3&gt;FUSE&lt;/h3&gt;
&lt;p&gt;FUSE stands for ‘Filesystem in USErspace’. FUSE let’s you create your own file systems without ever having to touch kernel code! Pretty neat, right? It does this by essentially acting as a bridge between your file system logic and kernel operations. A lot of innovative FUSE file systems exist, visit &lt;a href=&quot;https://en.wikipedia.org/wiki/Filesystem_in_Userspace#Applications&quot;&gt;this WikiPedia link&lt;/a&gt; to see some of the popular ones.&lt;/p&gt;
&lt;h3&gt;KIO-FUSE&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://api.kde.org/frameworks/kio/html/&quot;&gt;KIO&lt;/a&gt; is a KDE framework that provides and implements abstractions for accessing various types of (virtual) file systems in a cross-platform way. KIO-FUSE is a project by Fabian Vogt that lets you mount remote locations on your machine locally using FUSE. KIO-FUSE was later polished by feverfew (Alexander Saoutkin) and finally inducted as an official KDE project. Check out &lt;a href=&quot;https://feverfew.home.blog/&quot;&gt;feverfew’s blog&lt;/a&gt; to read more about the process and KIO-FUSE itself.&lt;/p&gt;
&lt;h3&gt;(X)FSTESTS&lt;/h3&gt;
&lt;p&gt;XFSTESTS is a filesystem regression test suite originally developed for &lt;a href=&quot;https://en.wikipedia.org/wiki/XFS&quot;&gt;XFS&lt;/a&gt;. XFSTESTS is used as a file system regression testing suite for all of Linux’s major file systems. Many file system maintainers require that any major changes be tested using XFSTESTS before they are submitted for integration. &lt;sup&gt;&lt;a href=&quot;https://kernel.googlesource.com/pub/scm/fs/ext2/xfstests-bld/+/HEAD/Documentation/what-is-xfstests.md&quot;&gt;ref&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h2&gt;FUSE support for XFSTESTS and its impact&lt;/h2&gt;
&lt;p&gt;XFSTESTS previously did not support FUSE file systems. A patch was submitted for doing so, but it was &lt;em&gt;sort of&lt;/em&gt; hack-y and was abandoned midway.
Main goal of &lt;a href=&quot;https://summerofcode.withgoogle.com/projects/#6429306361741312&quot;&gt;the GSoC project&lt;/a&gt; is to integrate XFSTESTS with KIO-FUSE for detecting stealthy bugs. Now, this could’ve been achieved without patching XFSTESTS for generic FUSE support, but we decided it’d be better to do so for the benefit of multiple open-source projects. A lot of FUSE file systems could potentially be tested and we’d marginally improve the health of the file systems ecosystem.&lt;/p&gt;
&lt;p&gt;So, I patched XFSTESTS to support FUSE file systems. This is significant because it’d allow dozens of existing and any upcoming FUSE file systems that can be mounted like &lt;code class=&quot;language-text&quot;&gt;mount -t ...&lt;/code&gt; to be regression tested. XFSTESTS evaluation can be used to fix the detected bugs which probably would have went unnoticed otherwise. This will inherently lead to more robust FUSE file systems. Development speed should see a fair amount of bump too since buggy patches will be automatically weeded out before they’re merged.&lt;/p&gt;
&lt;h2&gt;The patch&lt;/h2&gt;
&lt;p&gt;As mentioned earlier, I’m deliberately keeping technical details out of this post in an attempt to make the content more accessible to people who aren’t familiar with FUSE or file systems in general.&lt;/p&gt;
&lt;p&gt;You can find the patch &lt;a href=&quot;https://github.com/bhumitattarde/XFSTESTS-FUSE-patch&quot;&gt;here&lt;/a&gt;. Instructions for testing can be found in the &lt;code class=&quot;language-text&quot;&gt;README.fuse&lt;/code&gt; file. The patch is based on a (previously submitted and) now abandoned &lt;a href=&quot;https://patchwork.kernel.org/project/linux-fsdevel/patch/20200108192504.GA893@miu.piliscsaba.redhat.com/#23160523&quot;&gt;patch&lt;/a&gt; by Miklos
Szeredi.&lt;/p&gt;
&lt;p&gt;Writing the patch itself wasn’t much work but nature of FUSE, XFSTESTS meant a lot of time had to be spent in trial and error. Debugging was a bit harder. I also managed to leave a very silly bug which essentially resulted in XFSTESTS trying to mount the same directory twice. This wasted a couple of days. Fortunately, it was caught by one of my mentors. Afterwards, it was a smooth sail. While the patch was completed in the second week itself, we have held off sending it in case further modifications are required for integrating KIO-FUSE with XFSTESTS.&lt;/p&gt;
&lt;h2&gt;Closing thoughts&lt;/h2&gt;
&lt;p&gt;Next step would be adding support for KIO-FUSE, sending the patch to XFSTESTS mailing list and making the suggested changes, if any. Shoutout to my mentors — feverfew (Alexander Saoutkin) and Fabian Vogt. They’ve helped me at every step, even before GSoC started, and I appreciate it a lot.&lt;/p&gt;</content:encoded></item></channel></rss>